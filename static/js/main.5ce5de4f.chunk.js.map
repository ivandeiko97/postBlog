{"version":3,"sources":["components/Blog.jsx","redux/action.js","redux/reducer.js","secondaryFunc.js","components/blogList/post/InputPost.jsx","components/blogList/post/Post.jsx","components/blogList/post/PostHandler.js","components/blogList/PostList.jsx","components/blogList/PostListHandler.js","components/comments/comment/Comment.jsx","components/comments/CommentListHandler.js","components/comments/CommentList.jsx","components/blogList/post/ViewedPost.jsx","components/blogList/post/ViewedPostHandler.js","components/add/Add.jsx","App.js","serviceWorker.js","index.js"],"names":["Blog","children","className","to","LOAD_POSTS","LOAD_POST","fetchDataAction","dispatch","fetch","then","data","json","type","posts","fetchPostAction","id","post","initialState","viewedPost","fetchData","bodyData","load","method","headers","body","JSON","stringify","InputPost","props","text","input","onSave","onClose","data-editinput","defaultValue","onClick","event","data-save","data-close","Post","state","editTitle","editBody","title","changeEditMode","target","undefined","dataset","edit","setState","deleteHandler","changeHandler","editinput","value","closeHandler","close","saveHandler","changed","save","this","onChange","data-edit","Component","connect","ownProps","PostList","map","PostHandler","key","Comment","comment","comments","postId","useState","setBody","textAreaRef","React","createRef","length","ref","placeholder","commentBody","current","disabled","trim","ViewedPost","deleted","nextProps","CommentListHandler","match","params","Add","error","added","titleInput","bodyInput","inputHandler","addinput","clickHandler","addHandler","postBody","data-addinput","store","createStore","action","applyMiddleware","thunk","App","exact","path","component","PostListHandler","ViewedPostHandler","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ce5de4f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Blog.css';\r\n\r\nexport default function Blog({ children }) {\r\n  return (\r\n    <div>\r\n      <header className=\"header\">\r\n        <nav className=\"header-nav\">\r\n          <ul className=\"header-list\">\r\n            <li className=\"header-li\">\r\n              <Link to=\"/\" className=\"header-link\">Posts</Link>\r\n            </li>\r\n            <li className=\"header-li\">\r\n              <Link to=\"/add\" className=\"header-link\">Add Posts</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </header> \r\n      <main>\r\n        { children }\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n","export const LOAD_POSTS = 'LOAD_POSTS';\r\nexport const LOAD_POST = 'LOAD_POST';\r\n\r\nexport function fetchDataAction() {\r\n  return (dispatch) => {\r\n    fetch('https://bloggy-api.herokuapp.com/posts')\r\n      .then(data => data.json())\r\n      .then(data => dispatch(loadPostsAction(data)))\r\n  };\r\n};\r\n\r\nexport function fetchPostAction(id) {\r\n  return (dispatch) => {\r\n    fetch(`https://bloggy-api.herokuapp.com/posts/${id}?_embed=comments`)\r\n      .then(data => data.json())\r\n      .then(data => dispatch(loadPostAction(data)))\r\n  }\r\n}\r\n\r\nfunction loadPostsAction(posts) {\r\n  return {\r\n    type: LOAD_POSTS,\r\n    posts,\r\n  }\r\n}\r\n\r\nfunction loadPostAction(post) {\r\n  return {\r\n    type: LOAD_POST,\r\n    post,\r\n  }\r\n}\r\n","import {LOAD_POSTS, LOAD_POST } from './action';\r\n\r\nconst initialState = {\r\n  posts: null,\r\n  viewedPost: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case LOAD_POSTS:\r\n      return {\r\n        posts: action.posts,\r\n      };\r\n    case LOAD_POST: \r\n      return {\r\n        viewedPost: action.post,\r\n      }\r\n    default:\r\n      return state;\r\n  };\r\n};","export function fetchData (id, bodyData, load) {   \r\n  fetch(`https://bloggy-api.herokuapp.com/posts/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(bodyData)\r\n  })\r\n    .then(data => load(id))\r\n}","import React from 'react';\r\n\r\nexport default function InputPost(props) {\r\n  const {\r\n    text,\r\n    input,\r\n    onSave,\r\n    onClose,\r\n  } = props;\r\n\r\n  return (\r\n    <div className=\"post-inputWrapper\">\r\n      <input type=\"text\" className=\"post-input\" data-editinput={input} defaultValue={text} />\r\n      <div className=\"post-control\">\r\n        <button onClick={(event) => onSave(event)} data-save={input} className=\"post-save\">save</button>\r\n        <button onClick={onClose} data-close={input} className=\"post-close\">close</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { fetchData } from '../../../secondaryFunc';\r\nimport InputPost from './InputPost';\r\nimport './post.css';\r\n\r\nexport default class Post extends Component {\r\n  state = {\r\n    editTitle: false,\r\n    editBody: false,\r\n    title: this.props.title,\r\n    body: this.props.body,\r\n  }\r\n\r\n  changeEditMode = ({ target }) => {\r\n    if (target.dataset.edit === undefined) return\r\n    switch (target.dataset.edit) {\r\n      case 'title': \r\n        this.setState({\r\n          editTitle: true,\r\n        });\r\n        break;\r\n      case 'body': \r\n        this.setState({\r\n          editBody: true,\r\n        });\r\n        break;\r\n      default:\r\n    };\r\n  };\r\n  \r\n  deleteHandler = () => {\r\n    fetch(`https://bloggy-api.herokuapp.com/posts/${this.props.id}`, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(data => this.props.load())\r\n  }\r\n\r\n  changeHandler = ({ target }) => {\r\n    switch (target.dataset.editinput) {\r\n      case 'title':\r\n        this.setState({\r\n          title: target.value,\r\n        });\r\n        break;\r\n      case 'body':\r\n        this.setState({\r\n          body: target.value,\r\n        });\r\n        break;\r\n      default:\r\n    };\r\n  };\r\n\r\n  closeHandler = ({ target }) => {\r\n    switch (target.dataset.close) {\r\n      case 'title': \r\n        this.setState({\r\n          editTitle: false,\r\n        })\r\n        break;\r\n      case 'body': \r\n        this.setState({\r\n          editBody: false,\r\n        })\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  saveHandler = ({ target }) => {\r\n    const {title, body} = this.state;\r\n    const {id, load} = this.props;\r\n    let changed = {\r\n      title: title,\r\n      body: body,\r\n    };\r\n    switch (target.dataset.save) {\r\n      case 'title':\r\n        fetchData(id, changed, load)\r\n        this.setState({\r\n          editTitle: false,\r\n        })\r\n        break;\r\n      case 'body': {\r\n        fetchData(id, changed, load)\r\n        this.setState({\r\n          editBody: false,\r\n        })\r\n        break;\r\n      }\r\n      default:\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const {title, body, editTitle, editBody} = this.state;\r\n    return (\r\n      <section onClick={this.changeEditMode} onChange={this.changeHandler} className=\"post\">\r\n        <span onClick={this.deleteHandler} className=\"post-delete\">&times;</span>\r\n        {\r\n          editTitle\r\n            ?\r\n              <InputPost text={title} input='title' onSave={this.saveHandler} onClose={this.closeHandler} />\r\n            :\r\n              <h1 className=\"post-title\">\r\n                { title }\r\n                <span data-edit=\"title\" className=\"post-edit\"> edit</span>\r\n              </h1>\r\n        }\r\n\r\n        {\r\n          editBody\r\n            ?\r\n              <InputPost text={body} input='body' onSave={this.saveHandler} onClose={this.closeHandler} />\r\n            :\r\n              <p className=\"post-body\">\r\n                { body }\r\n                <span data-edit=\"body\" className=\"post-edit\"> edit</span>\r\n              </p>\r\n        }\r\n        <Link to={`/posts/${this.props.id}/`} className=\"post-view\">View details</Link>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\n","import { connect } from 'react-redux';\r\nimport Post from './Post';\r\nimport {fetchDataAction} from '../../../redux/action';\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  const {title, body, id} = ownProps.post;\r\n  return {\r\n    title,\r\n    body,\r\n    id,\r\n  };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    load: () => dispatch(fetchDataAction()),\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n","import React, { Component } from 'react'\r\nimport PostHandler from './post/PostHandler';\r\n\r\nexport default class PostList extends Component {\r\n  componentDidMount() {\r\n    this.props.load();\r\n  }\r\n\r\n  render() {\r\n    const { posts } = this.props;\r\n    if (posts) {\r\n      return (\r\n        <div>\r\n          {posts.map(post => <PostHandler key={post.id} post={post} />)}\r\n        </div>\r\n      )\r\n    };\r\n    \r\n    return (\r\n      <div className=\"preloader\">\r\n        <div className=\"preloader-1\"></div>\r\n        <div className=\"preloader-2\"></div>\r\n        <div className=\"preloader-3\"></div>\r\n      </div>\r\n    )\r\n  };\r\n};\r\n","import { connect } from 'react-redux';\r\nimport PostList from './PostList';\r\nimport { fetchDataAction } from '../../redux/action';\r\n\r\nfunction mapStateToProps({ posts }) {\r\n  return {\r\n    posts,\r\n  };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    load: () =>  dispatch(fetchDataAction()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\r\n","import React from 'react'\r\n\r\nexport default function Comment({ comment }) {\r\n  return (\r\n    <section>\r\n      <h1>Anonym</h1>\r\n      <p>{comment.body}</p>\r\n    </section>\r\n  )\r\n}\r\n","import { connect } from 'react-redux';\r\nimport CommentList from './CommentList.jsx';\r\nimport { fetchPostAction } from '../../redux/action.js';\r\n\r\nfunction mapStateToProps(state, {comments, postId}) {\r\n  return {\r\n    comments,\r\n    postId\r\n  };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    load: id => dispatch(fetchPostAction(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentList);\r\n","import React, { useState } from 'react';\r\nimport Comment from './comment/Comment';\r\n\r\nexport default function CommentList({comments, postId, load}) {\r\n  const [body, setBody] = useState('');\r\n  function changeTextArea({ target }) {\r\n    setBody(target.value)\r\n  }\r\n\r\n  let textAreaRef = React.createRef();\r\n  \r\n  function addCommentHandler() {\r\n    const commentBody = {\r\n      body: body,\r\n      postId: +postId,\r\n    }\r\n\r\n    fetch('https://bloggy-api.herokuapp.com/comments', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(commentBody)\r\n    })\r\n      .then(data => data.json())\r\n      .then(data => load(postId))\r\n      textAreaRef.current.value = '';\r\n      setBody('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"commentList\">\r\n      {\r\n        comments.length === 0 \r\n        ? \r\n          <p className=\"commentList-noCom\">No cooments</p> \r\n        : \r\n          comments.map(comment => <Comment key={comment.id} comment={comment} />)}\r\n\r\n      <div className=\"commentList-addWrapper\">\r\n        <textarea\r\n          className=\"commentList-textarea\"\r\n          ref={textAreaRef} \r\n          defaultValue={body} \r\n          placeholder=\"comment write here\" \r\n          onChange={changeTextArea}\r\n        />\r\n        <button\r\n          className=\"commentList-add\"\r\n          onClick={addCommentHandler} \r\n          disabled={body.trim() === ''}\r\n        >\r\n          Add Comment\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { fetchData } from '../../../secondaryFunc';\r\nimport InputPost from './InputPost';\r\nimport CommentListHandler from '../../comments/CommentListHandler';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class ViewedPost extends Component {\r\n  state = {\r\n    editTitle: false,\r\n    editBody: false,\r\n    title: null,\r\n    body: null,\r\n    deleted: false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.load(this.props.id);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({\r\n      title: nextProps.viewedPost.title,\r\n      body: nextProps.viewedPost.body,\r\n    })\r\n  }\r\n  \r\n  changeEditMode = ({ target }) => {\r\n    if (target.dataset.edit === undefined) return\r\n    switch (target.dataset.edit) {\r\n      case 'title': \r\n        this.setState({\r\n          editTitle: true,\r\n        });\r\n        break;\r\n      case 'body': \r\n        this.setState({\r\n          editBody: true,\r\n        });\r\n        break;\r\n      default:\r\n    };\r\n  };\r\n  \r\n  changeHandler = ({ target }) => {\r\n    switch (target.dataset.editinput) {\r\n      case 'title':\r\n        this.setState({\r\n          title: target.value,\r\n        });\r\n        break;\r\n      case 'body':\r\n        this.setState({\r\n          body: target.value,\r\n        });\r\n        break;\r\n      default:\r\n    };\r\n  };\r\n  \r\n  deleteHandler = () => {\r\n    fetch(`https://bloggy-api.herokuapp.com/posts/${this.props.id}`, {\r\n      method: 'DELETE',\r\n    })\r\n      this.setState({\r\n        deleted: true,\r\n      })\r\n  }\r\n  \r\n  closeHandler = ({ target }) => {\r\n    switch (target.dataset.close) {\r\n      case 'title': \r\n        this.setState({\r\n          editTitle: false,\r\n        })\r\n        break;\r\n      case 'body': \r\n        this.setState({\r\n          editBody: false,\r\n        })\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  saveHandler = ({ target }) => {\r\n    const {title, body} = this.state;\r\n    const {id, load} = this.props;\r\n    let changed = {\r\n      title: title,\r\n      body: body,\r\n    };\r\n\r\n    switch (target.dataset.save) {\r\n      case 'title':\r\n        fetchData(id, changed, load)\r\n        this.setState({\r\n          editTitle: false,\r\n        })\r\n        break;\r\n      case 'body': {\r\n        fetchData(id, changed, load)\r\n        this.setState({\r\n          editBody: false,\r\n        })\r\n        break;\r\n      }\r\n      default:\r\n    };\r\n  };\r\n\r\n   render() {\r\n    const {title, body, editTitle, editBody, deleted} = this.state;\r\n    const { viewedPost, id } = this.props;\r\n    if (viewedPost && !deleted) {\r\n      return (\r\n        <section onClick={this.changeEditMode} onChange={this.changeHandler} className=\"post\">\r\n          <span onClick={this.deleteHandler} className=\"post-delete\">&times;</span>\r\n          {\r\n            editTitle\r\n              ?\r\n                <InputPost text={title} input='title' onSave={this.saveHandler} onClose={this.closeHandler} />\r\n              :\r\n                <h1 className=\"post-title\">\r\n                  { title }\r\n                  <span data-edit=\"title\" className=\"post-edit\"> edit</span>\r\n                </h1>\r\n          }\r\n  \r\n          {\r\n            editBody\r\n              ?\r\n                <InputPost text={body} input='body' onSave={this.saveHandler} onClose={this.closeHandler} />\r\n              :\r\n                <p className=\"post-body\">\r\n                  { body }\r\n                  <span data-edit=\"body\" className=\"post-edit\"> edit</span>\r\n                </p>\r\n          }\r\n          <CommentListHandler comments={viewedPost.comments} postId={id} />\r\n        </section>\r\n      )\r\n    } else if (deleted) {\r\n      return (\r\n        <div className=\"deleted\">\r\n          <h1 className=\"deleted-message\">This post is deleted</h1>\r\n          <Link to=\"/\" className=\"deleted-back\">Back to posts</Link>\r\n        </div>\r\n      )\r\n    } \r\n    return (\r\n      <div className=\"preloader\">\r\n        <div className=\"preloader-1\"></div>\r\n        <div className=\"preloader-2\"></div>\r\n        <div className=\"preloader-3\"></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import { connect } from 'react-redux';\r\nimport ViewedPost from './ViewedPost';\r\nimport { fetchPostAction } from '../../../redux/action';\r\n\r\nfunction mapStateToProps({ viewedPost }, ownProps) {\r\n  return {\r\n    viewedPost,\r\n    id: ownProps.match.params.id,\r\n  };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    load: id => dispatch(fetchPostAction(id)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewedPost);\r\n","import React, { Component } from 'react';\r\nimport './add.css';\r\n\r\nexport default class Add extends Component {\r\n  state = {\r\n    title: '',\r\n    body: '',\r\n    error: false,\r\n    added: false,\r\n  }\r\n\r\n  titleInput = React.createRef();\r\n  bodyInput = React.createRef();\r\n\r\n  inputHandler = ({ target }) => {\r\n    switch (target.dataset.addinput) {\r\n      case 'title':\r\n        this.setState({\r\n          title: target.value,\r\n        });\r\n        break;\r\n      case 'body': \r\n        this.setState({\r\n          body: target.value,\r\n        })\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n  \r\n  clickHandler = () => {\r\n    this.setState({\r\n      added: false,\r\n    })\r\n  }\r\n\r\n  addHandler = () => {\r\n    const {title, body} = this.state;\r\n\r\n    if (title.trim() !== '' && body.trim() !== '') {\r\n      const postBody = {\r\n        title: title,\r\n        body: body,\r\n      }\r\n\r\n      fetch('https://bloggy-api.herokuapp.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postBody)\r\n      });\r\n\r\n      this.titleInput.current.value = '';\r\n      this.bodyInput.current.value = '';\r\n      this.setState({\r\n        body: '',\r\n        value: '',\r\n        error: false,\r\n        added: true,\r\n      })\r\n      \r\n    } else {\r\n        this.setState({\r\n          error: true,\r\n        })\r\n    };\r\n  }\r\n  \r\n  render() {\r\n    const {title, body, error, added} = this.state;\r\n    return (\r\n      <section className=\"add\">\r\n        <div className={`${added ? 'addedPost' : 'hidden'}`}>\r\n          <p className=\"added-p\">Post is added</p>\r\n          <button onClick={this.clickHandler} className=\"added-ok\">Ok</button>\r\n        </div>\r\n        <form className=\"add-form\" onChange={this.inputHandler}>\r\n          <input \r\n            type=\"text\" \r\n            className={`add-input ${error && title.trim() === '' ? 'error' : ''}`}\r\n            data-addinput=\"title\" \r\n            placeholder=\"title\" \r\n            defaultValue={title}\r\n            ref={this.titleInput}\r\n          />\r\n          <input \r\n            type=\"text\" \r\n            className={`add-input ${error && body.trim() === '' ? 'error' : ''}`}\r\n            data-addinput=\"body\" \r\n            placeholder=\"body\"\r\n            ref={this.bodyInput}\r\n            defaultValue={body} />\r\n        </form>\r\n        <button onClick={this.addHandler} className=\"add-btn\">Add</button>\r\n      </section>\r\n\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport thunk from 'redux-thunk';\nimport Blog from './components/Blog';\nimport reducer from './redux/reducer';\nimport PostListHandler from './components/blogList/PostListHandler';\nimport ViewedPostHandler from './components/blogList/post/ViewedPostHandler';\nimport Add from './components/add/Add';\nimport './App.css';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Blog>\n          <Switch>\n            <Route exact path=\"/\" component={PostListHandler} />\n            <Route path=\"/add\" component={Add} />\n            <Route path=\"/posts/:id/\" component={ViewedPostHandler} />\n          </Switch>\n        </Blog>\n      </Router>     \n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}